// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/zerohub/zerohub.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/zerohub/zerohub.go -destination ./pkg/zerohub/mock.go -package zerohub -self_package github.com/hotcode-dev/zerohub/pkg/zerohub ZeroHub
//

// Package zerohub is a generated GoMock package.
package zerohub

import (
	reflect "reflect"

	hub "github.com/hotcode-dev/zerohub/pkg/hub"
	gomock "go.uber.org/mock/gomock"
)

// MockZeroHub is a mock of ZeroHub interface.
type MockZeroHub struct {
	ctrl     *gomock.Controller
	recorder *MockZeroHubMockRecorder
	isgomock struct{}
}

// MockZeroHubMockRecorder is the mock recorder for MockZeroHub.
type MockZeroHubMockRecorder struct {
	mock *MockZeroHub
}

// NewMockZeroHub creates a new mock instance.
func NewMockZeroHub(ctrl *gomock.Controller) *MockZeroHub {
	mock := &MockZeroHub{ctrl: ctrl}
	mock.recorder = &MockZeroHubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockZeroHub) EXPECT() *MockZeroHubMockRecorder {
	return m.recorder
}

// AddHub mocks base method.
func (m *MockZeroHub) AddHub(hub hub.Hub) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddHub", hub)
}

// AddHub indicates an expected call of AddHub.
func (mr *MockZeroHubMockRecorder) AddHub(hub any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHub", reflect.TypeOf((*MockZeroHub)(nil).AddHub), hub)
}

// GetHubById mocks base method.
func (m *MockZeroHub) GetHubById(id string) hub.Hub {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHubById", id)
	ret0, _ := ret[0].(hub.Hub)
	return ret0
}

// GetHubById indicates an expected call of GetHubById.
func (mr *MockZeroHubMockRecorder) GetHubById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHubById", reflect.TypeOf((*MockZeroHub)(nil).GetHubById), id)
}

// NewHub mocks base method.
func (m *MockZeroHub) NewHub(hubId, metadata string, isPermanent bool) (hub.Hub, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewHub", hubId, metadata, isPermanent)
	ret0, _ := ret[0].(hub.Hub)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewHub indicates an expected call of NewHub.
func (mr *MockZeroHubMockRecorder) NewHub(hubId, metadata, isPermanent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewHub", reflect.TypeOf((*MockZeroHub)(nil).NewHub), hubId, metadata, isPermanent)
}

// RemoveHubById mocks base method.
func (m *MockZeroHub) RemoveHubById(id string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveHubById", id)
}

// RemoveHubById indicates an expected call of RemoveHubById.
func (mr *MockZeroHubMockRecorder) RemoveHubById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveHubById", reflect.TypeOf((*MockZeroHub)(nil).RemoveHubById), id)
}
