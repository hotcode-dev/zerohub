// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hotcode-dev/zerohub/pkg/zerohub (interfaces: Hub,Peer,ZeroHub)
//
// Generated by this command:
//
//	mockgen -destination mock.go -package zerohub -self_package github.com/hotcode-dev/zerohub/pkg/zerohub . Hub,Peer,ZeroHub
//

// Package zerohub is a generated GoMock package.
package zerohub

import (
	reflect "reflect"
	time "time"

	websocket "github.com/fasthttp/websocket"
	proto "github.com/hotcode-dev/zerohub/pkg/proto"
	gomock "go.uber.org/mock/gomock"
)

// MockHub is a mock of Hub interface.
type MockHub struct {
	ctrl     *gomock.Controller
	recorder *MockHubMockRecorder
}

// MockHubMockRecorder is the mock recorder for MockHub.
type MockHubMockRecorder struct {
	mock *MockHub
}

// NewMockHub creates a new mock instance.
func NewMockHub(ctrl *gomock.Controller) *MockHub {
	mock := &MockHub{ctrl: ctrl}
	mock.recorder = &MockHubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHub) EXPECT() *MockHubMockRecorder {
	return m.recorder
}

// AddPeer mocks base method.
func (m *MockHub) AddPeer(arg0 Peer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddPeer", arg0)
}

// AddPeer indicates an expected call of AddPeer.
func (mr *MockHubMockRecorder) AddPeer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPeer", reflect.TypeOf((*MockHub)(nil).AddPeer), arg0)
}

// GetCreatedAt mocks base method.
func (m *MockHub) GetCreatedAt() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreatedAt")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetCreatedAt indicates an expected call of GetCreatedAt.
func (mr *MockHubMockRecorder) GetCreatedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreatedAt", reflect.TypeOf((*MockHub)(nil).GetCreatedAt))
}

// GetId mocks base method.
func (m *MockHub) GetId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetId indicates an expected call of GetId.
func (mr *MockHubMockRecorder) GetId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetId", reflect.TypeOf((*MockHub)(nil).GetId))
}

// GetMetadata mocks base method.
func (m *MockHub) GetMetadata() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMetadata indicates an expected call of GetMetadata.
func (mr *MockHubMockRecorder) GetMetadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockHub)(nil).GetMetadata))
}

// GetPeers mocks base method.
func (m *MockHub) GetPeers() map[uint32]Peer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeers")
	ret0, _ := ret[0].(map[uint32]Peer)
	return ret0
}

// GetPeers indicates an expected call of GetPeers.
func (mr *MockHubMockRecorder) GetPeers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeers", reflect.TypeOf((*MockHub)(nil).GetPeers))
}

// RemovePeerById mocks base method.
func (m *MockHub) RemovePeerById(arg0 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemovePeerById", arg0)
}

// RemovePeerById indicates an expected call of RemovePeerById.
func (mr *MockHubMockRecorder) RemovePeerById(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePeerById", reflect.TypeOf((*MockHub)(nil).RemovePeerById), arg0)
}

// SendAnswerToPeer mocks base method.
func (m *MockHub) SendAnswerToPeer(arg0, arg1 uint32, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendAnswerToPeer", arg0, arg1, arg2)
}

// SendAnswerToPeer indicates an expected call of SendAnswerToPeer.
func (mr *MockHubMockRecorder) SendAnswerToPeer(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAnswerToPeer", reflect.TypeOf((*MockHub)(nil).SendAnswerToPeer), arg0, arg1, arg2)
}

// SendOfferToPeer mocks base method.
func (m *MockHub) SendOfferToPeer(arg0, arg1 uint32, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendOfferToPeer", arg0, arg1, arg2)
}

// SendOfferToPeer indicates an expected call of SendOfferToPeer.
func (mr *MockHubMockRecorder) SendOfferToPeer(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOfferToPeer", reflect.TypeOf((*MockHub)(nil).SendOfferToPeer), arg0, arg1, arg2)
}

// SetZeroHub mocks base method.
func (m *MockHub) SetZeroHub(arg0 ZeroHub) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetZeroHub", arg0)
}

// SetZeroHub indicates an expected call of SetZeroHub.
func (mr *MockHubMockRecorder) SetZeroHub(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetZeroHub", reflect.TypeOf((*MockHub)(nil).SetZeroHub), arg0)
}

// MockPeer is a mock of Peer interface.
type MockPeer struct {
	ctrl     *gomock.Controller
	recorder *MockPeerMockRecorder
}

// MockPeerMockRecorder is the mock recorder for MockPeer.
type MockPeerMockRecorder struct {
	mock *MockPeer
}

// NewMockPeer creates a new mock instance.
func NewMockPeer(ctrl *gomock.Controller) *MockPeer {
	mock := &MockPeer{ctrl: ctrl}
	mock.recorder = &MockPeerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeer) EXPECT() *MockPeerMockRecorder {
	return m.recorder
}

// GetId mocks base method.
func (m *MockPeer) GetId() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetId")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// GetId indicates an expected call of GetId.
func (mr *MockPeerMockRecorder) GetId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetId", reflect.TypeOf((*MockPeer)(nil).GetId))
}

// GetWSConn mocks base method.
func (m *MockPeer) GetWSConn() *websocket.Conn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWSConn")
	ret0, _ := ret[0].(*websocket.Conn)
	return ret0
}

// GetWSConn indicates an expected call of GetWSConn.
func (mr *MockPeerMockRecorder) GetWSConn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWSConn", reflect.TypeOf((*MockPeer)(nil).GetWSConn))
}

// HandleMessage mocks base method.
func (m *MockPeer) HandleMessage() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleMessage")
}

// HandleMessage indicates an expected call of HandleMessage.
func (mr *MockPeerMockRecorder) HandleMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleMessage", reflect.TypeOf((*MockPeer)(nil).HandleMessage))
}

// SendAnswer mocks base method.
func (m *MockPeer) SendAnswer(arg0 uint32, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendAnswer", arg0, arg1)
}

// SendAnswer indicates an expected call of SendAnswer.
func (mr *MockPeerMockRecorder) SendAnswer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAnswer", reflect.TypeOf((*MockPeer)(nil).SendAnswer), arg0, arg1)
}

// SendBinaryMessage mocks base method.
func (m *MockPeer) SendBinaryMessage(arg0 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendBinaryMessage", arg0)
}

// SendBinaryMessage indicates an expected call of SendBinaryMessage.
func (mr *MockPeerMockRecorder) SendBinaryMessage(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBinaryMessage", reflect.TypeOf((*MockPeer)(nil).SendBinaryMessage), arg0)
}

// SendHubInfo mocks base method.
func (m *MockPeer) SendHubInfo(arg0 []*proto.Peer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendHubInfo", arg0)
}

// SendHubInfo indicates an expected call of SendHubInfo.
func (mr *MockPeerMockRecorder) SendHubInfo(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHubInfo", reflect.TypeOf((*MockPeer)(nil).SendHubInfo), arg0)
}

// SendOffer mocks base method.
func (m *MockPeer) SendOffer(arg0 uint32, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendOffer", arg0, arg1)
}

// SendOffer indicates an expected call of SendOffer.
func (mr *MockPeerMockRecorder) SendOffer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOffer", reflect.TypeOf((*MockPeer)(nil).SendOffer), arg0, arg1)
}

// SetHub mocks base method.
func (m *MockPeer) SetHub(arg0 Hub) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHub", arg0)
}

// SetHub indicates an expected call of SetHub.
func (mr *MockPeerMockRecorder) SetHub(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHub", reflect.TypeOf((*MockPeer)(nil).SetHub), arg0)
}

// SetId mocks base method.
func (m *MockPeer) SetId(arg0 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetId", arg0)
}

// SetId indicates an expected call of SetId.
func (mr *MockPeerMockRecorder) SetId(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetId", reflect.TypeOf((*MockPeer)(nil).SetId), arg0)
}

// ToProtobuf mocks base method.
func (m *MockPeer) ToProtobuf() *proto.Peer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToProtobuf")
	ret0, _ := ret[0].(*proto.Peer)
	return ret0
}

// ToProtobuf indicates an expected call of ToProtobuf.
func (mr *MockPeerMockRecorder) ToProtobuf() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToProtobuf", reflect.TypeOf((*MockPeer)(nil).ToProtobuf))
}

// MockZeroHub is a mock of ZeroHub interface.
type MockZeroHub struct {
	ctrl     *gomock.Controller
	recorder *MockZeroHubMockRecorder
}

// MockZeroHubMockRecorder is the mock recorder for MockZeroHub.
type MockZeroHubMockRecorder struct {
	mock *MockZeroHub
}

// NewMockZeroHub creates a new mock instance.
func NewMockZeroHub(ctrl *gomock.Controller) *MockZeroHub {
	mock := &MockZeroHub{ctrl: ctrl}
	mock.recorder = &MockZeroHubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockZeroHub) EXPECT() *MockZeroHubMockRecorder {
	return m.recorder
}

// AddHub mocks base method.
func (m *MockZeroHub) AddHub(arg0 Hub) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddHub", arg0)
}

// AddHub indicates an expected call of AddHub.
func (mr *MockZeroHubMockRecorder) AddHub(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHub", reflect.TypeOf((*MockZeroHub)(nil).AddHub), arg0)
}

// GetHubById mocks base method.
func (m *MockZeroHub) GetHubById(arg0 string) Hub {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHubById", arg0)
	ret0, _ := ret[0].(Hub)
	return ret0
}

// GetHubById indicates an expected call of GetHubById.
func (mr *MockZeroHubMockRecorder) GetHubById(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHubById", reflect.TypeOf((*MockZeroHub)(nil).GetHubById), arg0)
}

// RemoveHubById mocks base method.
func (m *MockZeroHub) RemoveHubById(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveHubById", arg0)
}

// RemoveHubById indicates an expected call of RemoveHubById.
func (mr *MockZeroHubMockRecorder) RemoveHubById(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveHubById", reflect.TypeOf((*MockZeroHub)(nil).RemoveHubById), arg0)
}
