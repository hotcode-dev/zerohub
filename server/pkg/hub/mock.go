// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/hub/hub.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/hub/hub.go -destination ./pkg/hub/mock.go -package hub -self_package github.com/hotcode-dev/zerohub/pkg/hub /pkg/hub Hub
//

// Package hub is a generated GoMock package.
package hub

import (
	reflect "reflect"
	time "time"

	peer "github.com/hotcode-dev/zerohub/pkg/peer"
	gomock "go.uber.org/mock/gomock"
)

// MockHub is a mock of Hub interface.
type MockHub struct {
	ctrl     *gomock.Controller
	recorder *MockHubMockRecorder
	isgomock struct{}
}

// MockHubMockRecorder is the mock recorder for MockHub.
type MockHubMockRecorder struct {
	mock *MockHub
}

// NewMockHub creates a new mock instance.
func NewMockHub(ctrl *gomock.Controller) *MockHub {
	mock := &MockHub{ctrl: ctrl}
	mock.recorder = &MockHubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHub) EXPECT() *MockHubMockRecorder {
	return m.recorder
}

// AddPeer mocks base method.
func (m *MockHub) AddPeer(p peer.Peer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddPeer", p)
}

// AddPeer indicates an expected call of AddPeer.
func (mr *MockHubMockRecorder) AddPeer(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPeer", reflect.TypeOf((*MockHub)(nil).AddPeer), p)
}

// GetCreatedAt mocks base method.
func (m *MockHub) GetCreatedAt() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreatedAt")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetCreatedAt indicates an expected call of GetCreatedAt.
func (mr *MockHubMockRecorder) GetCreatedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreatedAt", reflect.TypeOf((*MockHub)(nil).GetCreatedAt))
}

// GetId mocks base method.
func (m *MockHub) GetId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetId indicates an expected call of GetId.
func (mr *MockHubMockRecorder) GetId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetId", reflect.TypeOf((*MockHub)(nil).GetId))
}

// GetMetadata mocks base method.
func (m *MockHub) GetMetadata() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMetadata indicates an expected call of GetMetadata.
func (mr *MockHubMockRecorder) GetMetadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockHub)(nil).GetMetadata))
}

// HandleMessage mocks base method.
func (m *MockHub) HandleMessage(p peer.Peer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleMessage", p)
}

// HandleMessage indicates an expected call of HandleMessage.
func (mr *MockHubMockRecorder) HandleMessage(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleMessage", reflect.TypeOf((*MockHub)(nil).HandleMessage), p)
}

// RemovePeerById mocks base method.
func (m *MockHub) RemovePeerById(id string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePeerById", id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// RemovePeerById indicates an expected call of RemovePeerById.
func (mr *MockHubMockRecorder) RemovePeerById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePeerById", reflect.TypeOf((*MockHub)(nil).RemovePeerById), id)
}

// SendAnswerToPeer mocks base method.
func (m *MockHub) SendAnswerToPeer(toPeerId, answerPeerId, answerSdp string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendAnswerToPeer", toPeerId, answerPeerId, answerSdp)
}

// SendAnswerToPeer indicates an expected call of SendAnswerToPeer.
func (mr *MockHubMockRecorder) SendAnswerToPeer(toPeerId, answerPeerId, answerSdp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAnswerToPeer", reflect.TypeOf((*MockHub)(nil).SendAnswerToPeer), toPeerId, answerPeerId, answerSdp)
}

// SendOfferToPeer mocks base method.
func (m *MockHub) SendOfferToPeer(toPeerId, offerPeerId, offerSdp string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendOfferToPeer", toPeerId, offerPeerId, offerSdp)
}

// SendOfferToPeer indicates an expected call of SendOfferToPeer.
func (mr *MockHubMockRecorder) SendOfferToPeer(toPeerId, offerPeerId, offerSdp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOfferToPeer", reflect.TypeOf((*MockHub)(nil).SendOfferToPeer), toPeerId, offerPeerId, offerSdp)
}
